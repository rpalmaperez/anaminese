const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase local
const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function removeOrphanAuthFinal() {
  try {
    console.log('üßπ Removendo IDs √≥rf√£os do auth definitivamente...');
    
    // 1. Buscar usu√°rios de auth
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    if (authError) {
      console.error('‚ùå Erro ao buscar usu√°rios de auth:', authError);
      return;
    }

    // 2. Buscar usu√°rios da tabela users
    const { data: dbUsers, error: dbError } = await supabase
      .from('users')
      .select('id, email, role');
    
    if (dbError) {
      console.error('‚ùå Erro ao buscar usu√°rios da tabela:', dbError);
      return;
    }

    console.log('\nüìã Estado atual:');
    console.log('Auth users:', authUsers.users.length);
    console.log('DB users:', dbUsers.length);

    // 3. Mapear IDs da tabela users por email
    const dbUsersByEmail = {};
    dbUsers.forEach(user => {
      dbUsersByEmail[user.email] = user;
    });

    // 4. Identificar e remover usu√°rios √≥rf√£os no auth
    console.log('\nüîç Verificando usu√°rios de auth...');
    
    for (const authUser of authUsers.users) {
      const dbUser = dbUsersByEmail[authUser.email];
      
      if (!dbUser) {
        // Usu√°rio existe no auth mas n√£o na tabela - remover
        console.log(`üóëÔ∏è Removendo √≥rf√£o do auth: ${authUser.email} (${authUser.id})`);
        
        const { error: deleteError } = await supabase.auth.admin.deleteUser(authUser.id);
        
        if (deleteError) {
          console.error(`‚ùå Erro ao remover ${authUser.email}:`, deleteError);
        } else {
          console.log(`‚úÖ ${authUser.email} removido do auth`);
        }
      } else if (authUser.id !== dbUser.id) {
        // IDs diferentes - remover o auth √≥rf√£o
        console.log(`üîÑ ID diferente para ${authUser.email}:`);
        console.log(`   Auth: ${authUser.id}`);
        console.log(`   DB:   ${dbUser.id}`);
        console.log(`üóëÔ∏è Removendo auth √≥rf√£o...`);
        
        const { error: deleteError } = await supabase.auth.admin.deleteUser(authUser.id);
        
        if (deleteError) {
          console.error(`‚ùå Erro ao remover auth √≥rf√£o:`, deleteError);
        } else {
          console.log(`‚úÖ Auth √≥rf√£o removido`);
        }
      } else {
        console.log(`‚úÖ ${authUser.email} sincronizado corretamente`);
      }
    }

    // 5. Criar usu√°rios de auth para os que existem na tabela mas n√£o no auth
    console.log('\nüîç Verificando usu√°rios que precisam de auth...');
    
    const { data: updatedAuthUsers } = await supabase.auth.admin.listUsers();
    const authEmails = new Set(updatedAuthUsers.users.map(u => u.email));
    
    const defaultPasswords = {
      admin: 'admin123',
      coordenador: 'coord123',
      professor: 'prof123'
    };

    for (const dbUser of dbUsers) {
      if (!authEmails.has(dbUser.email)) {
        const password = defaultPasswords[dbUser.role] || 'default123';
        
        console.log(`üë§ Criando auth para ${dbUser.email} com ID ${dbUser.id}...`);
        
        // Tentar criar com o ID espec√≠fico (pode n√£o funcionar)
        const { data: newAuthUser, error: createError } = await supabase.auth.admin.createUser({
          email: dbUser.email,
          password: password,
          email_confirm: true,
          user_metadata: {
            role: dbUser.role
          }
        });
        
        if (createError) {
          console.error(`‚ùå Erro ao criar auth para ${dbUser.email}:`, createError);
          continue;
        }
        
        console.log(`‚úÖ Auth criado: ${newAuthUser.user.id}`);
        
        // Se o ID for diferente, atualizar na tabela users
        if (newAuthUser.user.id !== dbUser.id) {
          console.log(`üîÑ Atualizando ID na tabela: ${dbUser.id} -> ${newAuthUser.user.id}`);
          
          const { error: updateError } = await supabase
            .from('users')
            .update({ id: newAuthUser.user.id })
            .eq('email', dbUser.email);
          
          if (updateError) {
            console.error(`‚ùå Erro ao atualizar ID:`, updateError);
          } else {
            console.log(`‚úÖ ID atualizado na tabela users`);
          }
        }
      }
    }

    console.log('\nüéâ Limpeza final conclu√≠da!');
    
    // 6. Verificar resultado final
    console.log('\nüîç Verifica√ß√£o final...');
    
    const { data: finalAuthUsers } = await supabase.auth.admin.listUsers();
    const { data: finalDbUsers } = await supabase
      .from('users')
      .select('email, id, role')
      .order('email');
    
    console.log('\nüìã Resultado final:');
    finalDbUsers?.forEach(user => {
      const authUser = finalAuthUsers?.users.find(au => au.email === user.email && au.id === user.id);
      const status = authUser ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${user.email}: ${user.id} (${user.role})`);
    });

    const perfectSync = finalDbUsers?.every(user => 
      finalAuthUsers?.users.some(au => au.email === user.email && au.id === user.id)
    );
    
    if (perfectSync) {
      console.log('\nüéâ PERFEITO! Todos os usu√°rios est√£o perfeitamente sincronizados!');
      console.log('\nüìù Credenciais para login:');
      console.log('‚Ä¢ Admin: admin@hidroginastica.com / admin123');
      console.log('‚Ä¢ Coordenador: coordenador@hidroginastica.com / coord123');
      console.log('‚Ä¢ Professor 1: professor1@hidroginastica.com / prof123');
      console.log('‚Ä¢ Professor 2: professor2@hidroginastica.com / prof123');
      console.log('\nüí° Agora voc√™ pode fazer login normalmente!');
    } else {
      console.log('\n‚ö†Ô∏è Ainda h√° problemas de sincroniza√ß√£o');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
}

removeOrphanAuthFinal();