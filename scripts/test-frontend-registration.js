const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√£o do Supabase usando as mesmas configura√ß√µes do frontend
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'Definida' : 'N√£o definida');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? 'Definida' : 'N√£o definida');
  process.exit(1);
}

// Usar a mesma configura√ß√£o que o frontend
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Simular a fun√ß√£o translateSupabaseError do AuthContext
const translateSupabaseError = (errorMessage) => {
  const translations = {
    'Invalid login credentials': 'Credenciais de login inv√°lidas',
    'Email not confirmed': 'E-mail n√£o confirmado',
    'User already registered': 'Usu√°rio j√° cadastrado',
    'Password should be at least 6 characters': 'A senha deve ter pelo menos 6 caracteres',
    'Unable to validate email address: invalid format': 'Formato de e-mail inv√°lido',
    'Email rate limit exceeded': 'Limite de tentativas de e-mail excedido',
  };
  
  return translations[errorMessage] || errorMessage;
};

// Simular exatamente a fun√ß√£o signUp do AuthContext
async function simulateSignUp(email, password, userData) {
  try {
    console.log('üîÑ Iniciando processo de registro...');
    console.log('Email:', email);
    console.log('Dados do usu√°rio:', userData);
    
    // Create auth user (exatamente como no AuthContext)
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de autentica√ß√£o...');
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
    });

    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o:', authError);
      return { error: translateSupabaseError(authError.message) };
    }

    console.log('‚úÖ Usu√°rio de auth criado:', authData.user?.id);
    console.log('Dados completos do auth:', authData);

    if (authData.user) {
      console.log('\n2Ô∏è‚É£ Criando perfil do usu√°rio...');
      
      // Create user profile (exatamente como no AuthContext)
      const profileData = {
        id: authData.user.id,
        email,
        name: userData.name || '',
        role: userData.role || 'professor',
        phone: userData.phone,
        department: userData.department,
        specialization: userData.specialization,
      };
      
      console.log('Dados do perfil a serem inseridos:', profileData);
      
      const { data: insertedData, error: profileError } = await supabase
        .from('users')
        .insert(profileData)
        .select()
        .single();

      if (profileError) {
        console.error('‚ùå Erro ao criar perfil:', profileError);
        console.log('C√≥digo do erro:', profileError.code);
        console.log('Mensagem:', profileError.message);
        console.log('Detalhes:', profileError.details);
        console.log('Hint:', profileError.hint);
        
        // Tentar limpar o usu√°rio de auth criado
        console.log('\nüßπ Tentando limpar usu√°rio de auth...');
        try {
          await supabase.auth.signOut();
          console.log('‚úÖ Logout realizado');
        } catch (cleanupError) {
          console.error('‚ùå Erro no cleanup:', cleanupError);
        }
        
        return { error: 'Erro ao criar perfil do usu√°rio' };
      }
      
      console.log('‚úÖ Perfil criado com sucesso:', insertedData);
    }

    return {};
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    return { error: 'Erro inesperado ao criar conta' };
  }
}

async function testFrontendRegistration() {
  console.log('üß™ Testando registro como no frontend...');
  
  const testUser = {
    email: `teste.frontend.${Date.now()}@gmail.com`,
    password: 'test123456',
    name: 'Usu√°rio Frontend Teste',
    role: 'professor',
    department: 'Educa√ß√£o F√≠sica',
    specialization: 'Hidrogin√°stica'
  };
  
  console.log('\nüìã Dados do teste:');
  console.log('- Email:', testUser.email);
  console.log('- Senha:', testUser.password);
  console.log('- Nome:', testUser.name);
  console.log('- Role:', testUser.role);
  
  const result = await simulateSignUp(
    testUser.email, 
    testUser.password, 
    {
      name: testUser.name,
      role: testUser.role,
      phone: undefined,
      department: testUser.department,
      specialization: testUser.specialization,
    }
  );
  
  if (result.error) {
    console.error('\n‚ùå ERRO NO REGISTRO:', result.error);
  } else {
    console.log('\n‚úÖ REGISTRO BEM-SUCEDIDO!');
    
    // Verificar se o usu√°rio foi criado
    console.log('\nüîç Verificando usu√°rio criado...');
    const { data: userData, error: fetchError } = await supabase
      .from('users')
      .select('*')
      .eq('email', testUser.email)
      .single();
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', fetchError);
    } else {
      console.log('‚úÖ Usu√°rio encontrado:', userData);
      
      // Limpar dados de teste
      console.log('\nüßπ Limpando dados de teste...');
      const { error: deleteError } = await supabase
        .from('users')
        .delete()
        .eq('id', userData.id);
      
      if (deleteError) {
        console.error('‚ùå Erro ao limpar:', deleteError);
      } else {
        console.log('‚úÖ Dados limpos');
      }
    }
  }
}

// Teste com diferentes cen√°rios
async function testDifferentScenarios() {
  console.log('\nüéØ Testando diferentes cen√°rios...');
  
  // Cen√°rio 1: Email inv√°lido
  console.log('\nüìß Teste 1: Email inv√°lido');
  const result1 = await simulateSignUp('email-invalido', 'test123456', {
    name: 'Teste',
    role: 'professor'
  });
  console.log('Resultado:', result1.error || 'Sucesso inesperado');
  
  // Cen√°rio 2: Senha muito curta
  console.log('\nüîí Teste 2: Senha muito curta');
  const result2 = await simulateSignUp('teste@gmail.com', '123', {
    name: 'Teste',
    role: 'professor'
  });
  console.log('Resultado:', result2.error || 'Sucesso inesperado');
  
  // Cen√°rio 3: Dados v√°lidos
  console.log('\n‚úÖ Teste 3: Dados v√°lidos');
  await testFrontendRegistration();
}

async function main() {
  console.log('üöÄ Iniciando teste de registro frontend...');
  console.log('URL do Supabase:', supabaseUrl);
  console.log('Chave an√¥nima:', supabaseAnonKey ? 'Definida' : 'N√£o definida');
  
  await testDifferentScenarios();
}

main().catch(console.error);