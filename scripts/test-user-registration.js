const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configura√ß√£o do Supabase usando vari√°veis de ambiente
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'Definida' : 'N√£o definida');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'Definida' : 'N√£o definida');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function testUserRegistration() {
  console.log('üß™ Testando cria√ß√£o de usu√°rio...');
  
  const testUser = {
    email: `teste.usuario.${Date.now()}@gmail.com`,
    password: 'test123456',
    name: 'Usu√°rio Teste',
    role: 'professor',
    department: 'Educa√ß√£o F√≠sica',
    specialization: 'Hidrogin√°stica'
  };
  
  try {
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de autentica√ß√£o...');
    
    // Criar usu√°rio no auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password,
    });
    
    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o:', authError.message);
      return;
    }
    
    console.log('‚úÖ Usu√°rio de auth criado:', authData.user?.id);
    
    if (authData.user) {
      console.log('\n2Ô∏è‚É£ Criando perfil do usu√°rio...');
      
      // Criar perfil na tabela users
      const { data: profileData, error: profileError } = await supabase
        .from('users')
        .insert({
          id: authData.user.id,
          email: testUser.email,
          name: testUser.name,
          role: testUser.role,
          phone: null,
          department: testUser.department,
          specialization: testUser.specialization,
        })
        .select()
        .single();
      
      if (profileError) {
        console.error('‚ùå Erro ao criar perfil:', profileError);
        console.log('Detalhes do erro:');
        console.log('- C√≥digo:', profileError.code);
        console.log('- Mensagem:', profileError.message);
        console.log('- Detalhes:', profileError.details);
        console.log('- Hint:', profileError.hint);
        
        // Tentar limpar o usu√°rio de auth criado
        console.log('\nüßπ Limpando usu√°rio de auth...');
        const { error: deleteError } = await supabase.auth.admin.deleteUser(authData.user.id);
        if (deleteError) {
          console.error('‚ùå Erro ao limpar usu√°rio:', deleteError.message);
        } else {
          console.log('‚úÖ Usu√°rio de auth removido');
        }
        
        return;
      }
      
      console.log('‚úÖ Perfil criado com sucesso:', profileData);
      
      // Verificar se o usu√°rio foi criado corretamente
      console.log('\n3Ô∏è‚É£ Verificando usu√°rio criado...');
      const { data: userData, error: fetchError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authData.user.id)
        .single();
      
      if (fetchError) {
        console.error('‚ùå Erro ao buscar usu√°rio:', fetchError.message);
      } else {
        console.log('‚úÖ Usu√°rio encontrado:', userData);
      }
      
      // Limpar dados de teste
      console.log('\nüßπ Limpando dados de teste...');
      
      // Remover perfil
      const { error: deleteProfileError } = await supabase
        .from('users')
        .delete()
        .eq('id', authData.user.id);
      
      if (deleteProfileError) {
        console.error('‚ùå Erro ao remover perfil:', deleteProfileError.message);
      } else {
        console.log('‚úÖ Perfil removido');
      }
      
      // Remover usu√°rio de auth
      const { error: deleteAuthError } = await supabase.auth.admin.deleteUser(authData.user.id);
      if (deleteAuthError) {
        console.error('‚ùå Erro ao remover usu√°rio de auth:', deleteAuthError.message);
      } else {
        console.log('‚úÖ Usu√°rio de auth removido');
      }
    }
    
    console.log('\nüéâ Teste conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Fun√ß√£o para verificar estrutura da tabela users
async function checkUsersTable() {
  console.log('\nüîç Verificando estrutura da tabela users...');
  
  try {
    // Tentar fazer uma consulta simples
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro ao acessar tabela users:', error);
      return false;
    }
    
    console.log('‚úÖ Tabela users acess√≠vel');
    console.log('Exemplo de registro:', data?.[0] || 'Nenhum registro encontrado');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao verificar tabela:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ Iniciando diagn√≥stico de registro de usu√°rio...');
  
  // Verificar tabela primeiro
  const tableOk = await checkUsersTable();
  
  if (tableOk) {
    // Executar teste de registro
    await testUserRegistration();
  } else {
    console.log('‚ùå N√£o √© poss√≠vel continuar - problema com a tabela users');
  }
}

main().catch(console.error);